/**
 *  vars
 *  (c) VARIANTE (http://variante.io)
 *
 *  This software is released under the MIT License:
 *  http://www.opensource.org/licenses/mit-license.php
 */

/**
 * Clearfix hack for floated elements.
 */
@mixin clearfix
{
    *zoom: 1;

    &:before
    {
        content: '';
        display: table;
    }

    &:after
    {
        content: '';
        display: table;
        clear: both;
    }
}

/**
 * Transforms containing selector into a container that can freely align
 * child inline-blocks with no fixed width/height requirements. Beware of whitespace
 * between inline elements.
 *
 * @param   {String} $alignH    Horizontal alignment of child elements (i.e. left, center, right).
 * @param   {String} $alignV    Vertical alignment of child elements (i.e. top, center, bototm).
 * @param   {String} $inline    Specifies if this block is an inline block.
 */
@mixin fluid-block($alignH:center, $alignV:center, $inline:false)
{
    @if      $alignH == 'left'                          { text-align: left;   }
    @else if $alignH == 'center' or $alignH == 'middle' { text-align: center; }
    @else if $alignH == 'right'                         { text-align: right;  }

    @if $alignV == 'top'                                { & > * { vertical-align: top;    } }
    @else if $alignV == 'center' or $alignV == 'middle' { & > * { vertical-align: middle; } }
    @else if $alignV == 'bottom'                        { & > * { vertical-align: bottom; } }

    @if   $inline == true { display: inline-block; }
    @else                 { display: block;        }

    & > *
    {
        display: inline-block;
    }

    &:before
    {
        height: 100%;
        vertical-align: middle;
        content: '';
        display: inline-block;
    }
}

/**
 * Transforms containing selector into a flexbox which auto aligns child
 * elements according to the specified params.
 *
 * @param   {String} $alignH    Horizontal alignment of child elements (i.e. left, center, right).
 * @param   {String} $alignV    Vertical alignment of child elements (i.e. top, middle, bottom).
 * @param   {String} $inline    Specifies if this flexbox is inline.
 */
@mixin flex-block($alignH:center, $alignV:center, $inline:false)
{
    @if      $alignH == 'left'                          { justify-content: flex-start; }
    @else if $alignH == 'center' or $alignH == 'middle' { justify-content: center;     }
    @else if $alignH == 'right'                         { justify-content: flex-end;   }

    @if $alignV == 'top'                                { align-items: flex-start; }
    @else if $alignV == 'center' or $alignV == 'middle' { align-items: center;     }
    @else if $alignV == 'bottom'                        { align-items: flex-end;   }

    @if   $inline == true { display: inline-flex; }
    @else                 { display: flex;        }
}

/**
 * Aligns containing selector to specified x/y directions in absolute
 * position.
 *
 * @param  {String} $alignH     Horizontal alignment (i.e. left, center, right).
 * @param  {String} $alignV     Vertical alignment (i.e. top, middle, bottom).
 */
@mixin abs-align($alignH:null, $alignV:null)
{
    position: absolute;

    @if $alignH == 'left'
    {
        left: 0px;
    }
    @else if $alignH == 'center' or $alignH == 'middle'
    {
        left: 0px;
        right: 0px;
        margin-left: auto;
        margin-right: auto;
    }
    @else if $alignH == 'right'
    {
        right: 0px;
    }

    @if $alignV == 'top'
    {
        top: 0px;
    }
    @else if $alignV == 'center' or $alignV == 'middle'
    {
        top: 0px;
        bottom: 0px;
        margin-top: auto;
        margin-bottom: auto;
    }
    @else if $alignV == 'bottom'
    {
        bottom: 0px;
    }
}

/**
 * Aligns containing inline-block to specified x/y directions in relative
 * position.
 *
 * @param  {String} $alignH     Horizontal alignment (i.e. left, center, right).
 * @param  {String} $alignV     Vertical alignment (i.e. top, middle, bottom).
 */
@mixin inline-align($alignH:null, $alignV:null)
{
    display: inline-block;
    position: relative;

    // Horizontal alignment cannot be altered at the child level. Tweak
    // the parent's text-align rule instead.

    @if      $alignV == 'top'                           { vertical-align: top;    }
    @else if $alignV == 'center' or $alignV == 'middle' { vertical-align: middle; }
    @else if $alignV == 'bottom'                        { vertical-align: bottom; }
}

/**
 * Aligns child element to the parent flexbox.
 *
 * @param  {String} $alignH     Horizontal alignment (i.e. left, center, right).
 * @param  {String} $alignV     Vertical alignment (i.e. top, middle, bottom).
 */
@mixin flex-align($alignH:null, $alignV:null)
{
    // Horizontal align cannot be altered at the child level. Do it
    // at the parent level.

    @if      $alignV == 'top'                           { align-self: flex-start; }
    @else if $alignV == 'center' or $alignV == 'middle' { align-self: center;     }
    @else if $alignV == 'bottom'                        { align-self: flex-end;   }
}
