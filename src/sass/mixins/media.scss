/**
 *  vars
 *  (c) VARIANTE (http://variante.io)
 *
 *  This software is released under the MIT License:
 *  http://www.opensource.org/licenses/mit-license.php
 */

@import './features';

/**
 * Media query for screens in portrait orientation.
 */
@mixin screen-portrait { @media only screen and (orientation: portrait) { @content; } }

/**
 * Media query for screens in landscape orientation.
 */
@mixin screen-landscape { @media only screen and (orientation: landscape) { @content; } }

/**
 * Media query for screens at a specified minimum width.
 *
 * @param  {Number} $minWidth
 */
@mixin screen-min-width($minWidth) { @media only screen and (min-width: #{$minWidth}px) { @content; } }

/**
 * Media query for screens at a specified maximum width.
 *
 * @param  {Number} $maxWidth
 */
@mixin screen-max-width($maxWidth) { @media only screen and (max-width: #{$maxWidth}px) { @content; } }

/**
 * Media query for screens at a specified minimum height.
 *
 * @param  {Number} $minHeight
 */
@mixin screen-min-height($minHeight) { @media only screen and (min-height: #{$minHeight}px) { @content; } }

/**
 * Media query for screens at a specified maximum height.
 *
 * @param  {Number} $maxHeight
 */
@mixin screen-max-height($maxHeight) { @media only screen and (max-height: #{$maxHeight}px) { @content; } }

/**
 * Media query for the minimum width/height threshold of the specified screen type.
 *
 * @param  {String}  $screen        Screen type (i.e. mobile, phablet, tablet, desktop).
 * @param  {Boolean} $exclusive     Specifies whether the media queries should be exclusive to this screen
 *                                  type. If false, the generated media query will use the minimum threshold
 *                                  of the selected screen type. If true, the generated media query will be
 *                                  bounded by the minimum and the maximum thresholds.
 * @param  {Boolean} $invert        Inverts the generated media query.
 * @param  {String}  $measurement   Specifies width or height measurement.
 * @param  {Boolean} $touch         Specifues whether the condition is only valid for touch devices
 *                                  (requires Modernizr feature detection), namely the '.touch' class.
 *                                  If false (default), it does NOT use the '.no-touch' class, but
 *                                  instead applies content normally.
 */
@mixin screen($screen, $exclusive:false, $invert:false, $measurement:width, $touch:false)
{
    @if $screen == mobile
    {
        $min-threshold: 0px;
        $max-threshold: 667px;
    }

    @else if $screen == phablet
    {
        $min-threshold: 668px;
        $max-threshold: 767px;
    }

    @else if $screen == tablet
    {
        $min-threshold: 768px;
        $max-threshold: 1024px;
    }

    @else if $screen == desktop
    {
        $min-threshold: 1025px;
        $max-threshold: 10000px; // some ridiculously large arbituary number
    }

    @if $min-threshold != null and $max-threshold != null
    {
        @if $exclusive == true
        {
            @if $invert == true
            {
                @media screen and (max-#{$measurement}: #{$min-threshold - 1px}) { @include touch($touch, false) { @content; } }
                @media screen and (min-#{$measurement}: #{$max-threshold + 1px}) { @include touch($touch, false) { @content; } }
            }
            @else
            {
                @media screen and (min-#{$measurement}: #{$min-threshold}) and (max-#{$measurement}: #{$max-threshold}) { @include touch($touch, false) { @content; } }
            }
        }
        @else
        {
            @if $invert == true
            {
                @media screen and (max-#{$measurement}: #{$min-threshold - 1px}) { @include touch($touch, false) { @content; } }
            }
            @else
            {
                @media screen and (min-#{$measurement}: $min-threshold) { @include touch($touch, false) { @content; } }
            }
        }
    }
}

/**
 * Sets the background-size and background-position of a target element
 * which is using an image map to the corresponding item in the map.
 *
 * @param  {Number} $col-index 0-based index of the column of the target item.
 * @param  {Number} $row-index 0-based index of the row of the target item.
 * @param  {Number} $num-cols  Total number of columns in the image map.
 * @param  {Number} $num-rows  Total number of rows in the image map.
 */
@mixin image-map-item($path:null, $col-index, $row-index, $num-cols, $num-rows)
{
    @if $path != null
    {
        background-image: url($path);
    }

    $x: 0;
    $y: 0;

    @if $num-cols > 1 { $x: #{((100 / ($num-cols - 1)) * $col-index)}; }
    @if $num-rows > 1 { $y: #{((100 / ($num-rows - 1)) * $row-index)}; }

    background-size: #{$num-cols * 100}% #{$num-rows * 100}%;
    background-position: #{$x}% #{$y}%;
}

/**
 * Auto generates a list of class names of the target selector, where each
 * class represents a sprite as provided by the sprite map.
 *
 * @param  {String} $path Path of sprite map.
 * @param  {List}   $map  List (1D or 2D) of class names. The position of each list item
 *                        directly corresponds to the sprite position on the sprite map.
 *
 * @note This mixin is quite slow in performance due to the nested loop.
 */
@mixin image-map($path, $map)
{
    $max-rows: length($map);

    background-image: url($path);

    @if $max-rows > 0
    {
        @if type-of(nth($map, 1)) == list
        {
            $max-cols: length(nth($map, 1));

            @for $i from 1 through $max-rows
            {
                $row: nth($map, $i);

                @for $j from 1 through length(nth($map, $i))
                {
                  $col: nth($row, $j);

                  &.#{$col} { @include image-map-item(null, $j - 1, $i - 1, $max-cols, $max-rows); }
                }
            }
        }
        @else
        {
            @for $i from 1 through $max-rows
            {
                $col: nth($map, $i);

                &.#{$col} { @include image-map-item(null, $i - 1, 0, $max-rows, 1); }
            }
        }
    }
}
