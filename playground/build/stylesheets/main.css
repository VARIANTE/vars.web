/**
 *  vars
 *  (c) VARIANTE (http://variante.io)
 *
 *  This software is released under the MIT License:
 *  http://www.opensource.org/licenses/mit-license.php
 */
/**
 *  vars
 *  (c) VARIANTE (http://variante.io)
 *
 *  This software is released under the MIT License:
 *  http://www.opensource.org/licenses/mit-license.php
 */
/**
 *  vars
 *  (c) VARIANTE (http://variante.io)
 *
 *  This software is released under the MIT License:
 *  http://www.opensource.org/licenses/mit-license.php
 */
/**
 * Clearfix hack for floated elements.
 */
/**
 * Transforms containing selector into a container that can freely align
 * child inline-blocks with no fixed width/height requirements. Beware of whitespace
 * between inline elements.
 *
 * @param  {List}   $alignH  Horizontal alignment of child elements (i.e. left, center, right). Option to
 *                            specify left/right paddings respectively.
 * @param  {List}   $alignV  Vertical alignment of child elements (i.e. top, center, bototm). Option to
 *                            specify top/bottom paddings respectively.
 * @param  {String} $inline  Specifies if this block is an inline block.
 */
/**
 * Transforms containing selector into a flexbox which auto aligns child
 * elements according to the specified params.
 *
 * @param  {List}    $alignH     Horizontal alignment of child elements (i.e. left, center, right). Option
 *                                to specify left/right paddings respectively.
 * @param  {List}    $alignV     Vertical alignment of child elements (i.e. top, middle, bottom). Option
 *                                to specify top/bottom paddings respectively.
 * @param  {Boolean} $direction  Determines the main axis (i.e. row, row-reverse, column, column-reverse).
 * @param  {Boolean} $wrap       Determines if wrapping is enabled.
 * @param  {String}  $inline     Specifies if this flexbox is inline.
 */
/**
 * Aligns containing selector to specified x/y directions in absolute position.
 *
 * @param {List} $alignH     Horizontal alignment (left|center|right, left|right offset, right offset).
 * @param {List} $alignV     Vertical alignment (top|center|middle|bottom, top|bottom offset, bottom offset).
 */
/**
 * Aligns containing selector to specified x/y directions in fixed position.
 *
 * @param {List} $alignH     Horizontal alignment (left|center|right, left|right offset, right offset).
 * @param {List} $alignV     Vertical alignment (top|center|middle|bottom, top|bottom offset, bottom offset).
 */
/**
 * Aligns containing inline-block to specified x/y directions in relative
 * position.
 *
 * @param {String} $alignH     Horizontal alignment (i.e. left, center, right).
 * @param {String} $alignV     Vertical alignment (i.e. top, middle, bottom).
 */
/**
 * Transforms target selector into a container for
 * parallax elements.
 *
 * @param {Number} $perspective    Tweak this value to adjust perspective.
 * @see parallax-element
 */
/**
 * Transforms target selector into a parallax element. The
 * target selector must be a child of a parallax-block.
 *
 * @param {String} $type   Layer type, either 'group' or 'layer'.
 * @param {Number} $z      Position in the z-axis.
 * @see parallax-block
 */
/**
 * Sets the diameter of the target selector.
 *
 * @param {Number}  $diameter
 * @param {Boolean} $oval
 */
/**
 * Fits dimension to parent container.
 *
 * @param {Boolean} $w     Specifies whether to fit the width.
 * @param {Boolean} $h     Specifies whether to fit the height.
 */
/**
 *  vars
 *  (c) VARIANTE (http://variante.io)
 *
 *  This software is released under the MIT License:
 *  http://www.opensource.org/licenses/mit-license.php
 */
/**
 * Selector for elements with the vs-controller attribute.
 *
 * @param {String} $name vs-controller attribute value.
 */
/**
 * Selector for elements with the vs-instance attribute.
 *
 * @param {String} $name vs-instance attribute value.
 */
/**
 * Selects elements with the specified vs-property key and value.
 *
 * @param {String} $key    vs-property key.
 * @param {String} $value  vs-property value, if applicable.
 * @param {String} $scope  Specifies the scope relative to the target selector
 *                          in which this property applies to (any, this, parent, or child).
 */
/**
 * Binds the content to one/multiple vs-states of the target selector.
 * Option to specify whether the state(s) are default.
 *
 * @param {List}    $states    List of state names.
 * @param {Boolean} $default   Specifies whether the class(es) are default.
 */
/**
 * Binds the content to a vs-style of the target selector.
 * Option to specify whether the style is default.
 *
 * @param {String}  $style     Style name.
 * @param {Boolean} $default   Specifies whether the class(es) are default.
 * @param {String}  $scope     Specifies the scope relative to the target selector
 *                              in which this property applies to (any, this, parent, or child).
 */
/**
 *  vars
 *  (c) VARIANTE (http://variante.io)
 *
 *  This software is released under the MIT License:
 *  http://www.opensource.org/licenses/mit-license.php
 */
/**
 * Binds the content to the target selector based on the 'csstransitions' feature
 * (requires Modernizr).
 *
 * @param {Boolean} $enabled   Specifies whether 'csstransitions' class is required.
 */
/**
 * Binds the content to the target selector based on the 'cssanimations' feature
 * (requires Modernizr).
 *
 * @param {Boolean} $enabled   Specifies whether 'cssanimations' class is required.
 */
/**
 * Binds the content to the target selector based on the 'touch' and 'no-touch' feature
 * (requires Modernizr).
 *
 * @param {Boolean} $enabled   Specifies whether 'touch' class is required.
 * @param {Boolean} $exclusive Specifies whether 'no-touch' class is required if
 *                              $enabled is false.
 */
/**
 * Enables hardware acceleration for containing selector.
 */
/**
 *  vars
 *  (c) VARIANTE (http://variante.io)
 *
 *  This software is released under the MIT License:
 *  http://www.opensource.org/licenses/mit-license.php
 */
/**
 * Media query for screens in portrait orientation.
 */
/**
 * Media query for screens in landscape orientation.
 */
/**
 * Media query for screens at a specified minimum width.
 *
 * @param {Number} $minWidth
 */
/**
 * Media query for screens at a specified maximum width.
 *
 * @param {Number} $maxWidth
 */
/**
 * Media query for screens at a specified minimum height.
 *
 * @param {Number} $minHeight
 */
/**
 * Media query for screens at a specified maximum height.
 *
 * @param {Number} $maxHeight
 */
/**
 * Media query for the minimum width/height threshold of the specified screen type.
 *
 * @param {String}  $screen        Screen type (i.e. mobile, phablet, tablet, desktop).
 * @param {Boolean} $exclusive     Specifies whether the media queries should be exclusive to this screen
 *                                  type. If false, the generated media query will use the minimum threshold
 *                                  of the selected screen type. If true, the generated media query will be
 *                                  bounded by the minimum and the maximum thresholds.
 * @param {Boolean} $invert        Inverts the generated media query.
 * @param {String}  $measurement   Specifies width or height measurement.
 * @param {Boolean} $touch         Specifues whether the condition is only valid for touch devices
 *                                  (requires Modernizr feature detection), namely the '.touch' class.
 *                                  If false (default), it does NOT use the '.no-touch' class, but
 *                                  instead applies content normally.
 */
/**
 * Sets the background-size and background-position of a target element
 * which is using an image map to the corresponding item in the map.
 *
 * @param {String} $path      Path of sprite map.
 * @param {Number} $row-index 0-based index of the row of the target item.
 * @param {Number} $col-index 0-based index of the column of the target item.
 * @param {Number} $num-rows  Total number of rows in the image map.
 * @param {Number} $num-cols  Total number of columns in the image map.
 */
/**
 * Auto generates a list of class names of the target selector, where each
 * class represents a sprite as provided by the sprite map.
 *
 * @param {String} $path Path of sprite map.
 * @param {List}   $map  List (1D or 2D) of class names. The position of each list item
 *                        directly corresponds to the sprite position on the sprite map.
 *
 * @note This mixin is quite slow in performance due to the nested loop.
 */
/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"], input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */ }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

/**
 *  vars
 *  (c) VARIANTE (http://variante.io)
 *
 *  This software is released under the MIT License:
 *  http://www.opensource.org/licenses/mit-license.php
 */
html {
  width: 100%;
  height: 100%;
  font-size: 16px; }

body {
  width: 100%;
  height: 100%;
  font-size: 100%; }

article {
  display: block;
  position: relative; }

aside {
  display: block;
  position: relative; }

details {
  display: block;
  position: relative; }

dialog {
  display: block;
  position: relative; }

summary {
  display: block;
  position: relative; }

footer {
  display: block;
  position: relative; }

header {
  display: block;
  position: relative; }

main {
  display: block;
  position: relative; }

figcaption {
  display: block;
  position: relative; }

figure {
  display: block;
  position: relative; }

hgroup {
  display: block;
  position: relative; }

nav {
  display: block;
  position: relative; }

section {
  display: block;
  position: relative; }

div {
  display: block;
  position: relative; }

table {
  display: block;
  position: relative; }

tr {
  display: block;
  position: relative; }

td {
  display: block;
  position: relative; }

th {
  display: block;
  position: relative; }

tbody {
  display: block;
  position: relative; }

thead {
  display: block;
  position: relative; }

tfoot {
  display: block;
  position: relative; }

col {
  display: block;
  position: relative; }

a[type='button'] {
  cursor: pointer; }
  a[type='button']:disabled {
    cursor: default; }

input[type='submit'] {
  cursor: pointer; }
  input[type='submit']:disabled {
    cursor: default; }

input[type='button'] {
  cursor: pointer; }
  input[type='button']:disabled {
    cursor: default; }

input[type='checkbox'] {
  cursor: pointer; }
  input[type='checkbox']:disabled {
    cursor: default; }

button {
  cursor: pointer; }
  button:disabled {
    cursor: default; }

input[type='text'] {
  resize: none; }
  input[type='text']:focus {
    outline-width: 0; }
  input[type='text']:-webkit-autofill {
    box-shadow: 0 0 0 1000px white inset; }

input[type='password'] {
  resize: none; }
  input[type='password']:focus {
    outline-width: 0; }
  input[type='password']:-webkit-autofill {
    box-shadow: 0 0 0 1000px white inset; }

input[type='number'] {
  resize: none; }
  input[type='number']:focus {
    outline-width: 0; }
  input[type='number']:-webkit-autofill {
    box-shadow: 0 0 0 1000px white inset; }

input[type='date'] {
  resize: none; }
  input[type='date']:focus {
    outline-width: 0; }
  input[type='date']:-webkit-autofill {
    box-shadow: 0 0 0 1000px white inset; }

input[type='month'] {
  resize: none; }
  input[type='month']:focus {
    outline-width: 0; }
  input[type='month']:-webkit-autofill {
    box-shadow: 0 0 0 1000px white inset; }

input[type='week'] {
  resize: none; }
  input[type='week']:focus {
    outline-width: 0; }
  input[type='week']:-webkit-autofill {
    box-shadow: 0 0 0 1000px white inset; }

input[type='time'] {
  resize: none; }
  input[type='time']:focus {
    outline-width: 0; }
  input[type='time']:-webkit-autofill {
    box-shadow: 0 0 0 1000px white inset; }

input[type='datetime'] {
  resize: none; }
  input[type='datetime']:focus {
    outline-width: 0; }
  input[type='datetime']:-webkit-autofill {
    box-shadow: 0 0 0 1000px white inset; }

input[type='datetime-local'] {
  resize: none; }
  input[type='datetime-local']:focus {
    outline-width: 0; }
  input[type='datetime-local']:-webkit-autofill {
    box-shadow: 0 0 0 1000px white inset; }

input[type='email'] {
  resize: none; }
  input[type='email']:focus {
    outline-width: 0; }
  input[type='email']:-webkit-autofill {
    box-shadow: 0 0 0 1000px white inset; }

input[type='search'] {
  resize: none; }
  input[type='search']:focus {
    outline-width: 0; }
  input[type='search']:-webkit-autofill {
    box-shadow: 0 0 0 1000px white inset; }

input[type='tel'] {
  resize: none; }
  input[type='tel']:focus {
    outline-width: 0; }
  input[type='tel']:-webkit-autofill {
    box-shadow: 0 0 0 1000px white inset; }

input[type='url'] {
  resize: none; }
  input[type='url']:focus {
    outline-width: 0; }
  input[type='url']:-webkit-autofill {
    box-shadow: 0 0 0 1000px white inset; }

textarea {
  resize: none; }
  textarea:focus {
    outline-width: 0; }
  textarea:-webkit-autofill {
    box-shadow: 0 0 0 1000px white inset; }

form {
  position: static; }

html, body, article, aside, details, dialog, summary, footer, header, main, figcaption, figure, hgroup, nav, section, div, table, tr, td, th, tbody, thead, tfoot, col, a[type='button'], input[type='submit'], input[type='button'], input[type='checkbox'], button, a, p, li, em, strong, h1, h2, h3, h4, h5, h6, label, span, ul, ol, input[type='text'], input[type='password'], input[type='number'], input[type='date'], input[type='month'], input[type='week'], input[type='time'], input[type='datetime'], input[type='datetime-local'], input[type='email'], input[type='search'], input[type='tel'], input[type='url'], textarea, form {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  outline: none;
  border: none; }

article, aside, details, dialog, summary, footer, header, main, figcaption, figure, hgroup, nav, section, div, table, tr, td, th, tbody, thead, tfoot, col, a[type='button'], input[type='submit'], input[type='button'], input[type='checkbox'], button, a, p, li, em, strong, h1, h2, h3, h4, h5, h6, label, span, ul, ol, input[type='text'], input[type='password'], input[type='number'], input[type='date'], input[type='month'], input[type='week'], input[type='time'], input[type='datetime'], input[type='datetime-local'], input[type='email'], input[type='search'], input[type='tel'], input[type='url'], textarea, form {
  font-weight: normal;
  text-decoration: none;
  line-height: normal;
  -webkit-tap-highlight-color: transparent;
  -webkit-font-smoothing: antialiased;
  -webkit-text-stroke: 0;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
  -webkit-text-size-adjust: 100%;
      -ms-text-size-adjust: 100%;
          text-size-adjust: 100%; }

/*# sourceMappingURL=data:application/json;base64, */
